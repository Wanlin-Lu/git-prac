連猴子都能懂的Git命令
add 把變更錄入索引中
commit 记录索引的状态
pull 取得远端数据库的内容

git branch <branch-name> 创建分支
git checkout <branch-name> 切换分支
git checkout -b <branch-name> 创建并切换到新分支
git checkout -b <new-branch-name> <from-branch-name> 从from分支分出new分支
git branch 查看分支状态
git branch -d <branch-name> 删除分支
git rebase <branch-name> 变基合并

git tag <tagname> 添加标签
git tag 查看标签
git tag -a <tagname> 添加标签，并打开vim输入注解
git tag -am "注解" <tagname> 添加标签，同时添加注解
git tag -n 查看标签
git tag -d <tagname> 删除标签
-----git tag----

git commit --amend 修改最近一次添加到索引的内容。
git revert HEAD 添加revert说明
git reset --hard soft mixed 取消最近的提交
git reset --hard HEAD~~
git reset --hard HEAD~2 取消最近两次提交
git reset --hard ORIG_HEAD 如果reset出问题，还原到reset之前的状态
-----git reset---git revert---git commit --amend---

git cherry-pick <hash-commit-number> 摘樱桃。《处理冲突后添加》
git cherry-pick <hash-commit-number> 摘樱桃。后续会merge这些。from i3

git rebase -i HEAD~~合并最近的两次提交，第一次，这是第二次squash
git rebase -i HEAD~~ 修改最近倒数第二次的提交 edit, 《后添加内容》
git rebase -i HEAD~~ 修改最近倒数第二次的提交 edit
这是rebase最后一次提交

git merge --squash i2 use this merge squashed i2
先切换到master分支再操作

切换到master 之后所添加,《这里处理冲突，将要提交》

git work flow:
master<--hotfix|release-->develop<-->feature

master and develop are main branches, hold for whole project life;

features are branched from develop, are mainly working branch; delete when useless.

release is branched from develop, prepare for release test, if works well, merge to master;

hotfix is branched from master, to fix on line bug.will merged to master|develop.